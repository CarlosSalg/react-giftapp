{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","categories","className","type","value","onChange","target","getGifs","category","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","src","alt","GifGrid","loading","state","setState","useEffect","then","imgs","useFetchGifs","key","GifExpertApp","ReactDOM","render","document","getElementById"],"mappings":"6MAqCeA,EAlCK,SAAC,GAAyB,IAAtBC,EAAqB,EAArBA,cAAqB,EAELC,mBAAS,IAFJ,mBAElCC,EAFkC,KAEtBC,EAFsB,KAoBzC,OACI,0BACIC,SAda,SAACC,GAClBA,EAAEC,iBAEEJ,EAAWK,OAAOC,OAAS,IAE3BR,GAAe,SAAAS,GAAU,OAAMP,GAAN,mBAAqBO,OAC9CN,EAAc,OAUd,2BACIO,UAAU,qBACVC,KAAK,OACLC,MAAQV,EACRW,SAxBc,SAACR,GACvBF,EAAeE,EAAES,OAAOF,Y,uBCPnBG,EAAO,uCAAG,WAAQC,GAAR,uBAAAC,EAAA,6DAEbC,EAFa,iDAEoCC,UAAUH,GAF9C,8DAGAI,MAAOF,GAHP,cAGbG,EAHa,gBAIIA,EAAKC,OAJT,uBAIXC,EAJW,EAIXA,KAEFC,EAAOD,EAAKE,KAAK,SAAAC,GACnB,MAAO,CACHC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAKQ,EAAIG,OAAOC,iBAAiBZ,QAVtB,kBAcZM,GAdY,4CAAH,sDCCPO,EAAc,SAAC,GAAoB,IAAlBH,EAAiB,EAAjBA,MAAOV,EAAU,EAAVA,IAEjC,OACI,yBAAKR,UAAU,+CACX,yBAAKA,UAAU,aACX,yBAAKA,UAAU,YAAYsB,IAAMd,EAAMe,IAAML,IAC7C,2BAAKA,MCHRM,EAAU,SAAC,GAAkB,IAAhBlB,EAAe,EAAfA,SAAe,ECFb,SAAEA,GAAe,IAAD,EAEdf,mBAAS,CAC/BsB,KAAM,GACNY,SAAS,IAJ2B,mBAEjCC,EAFiC,KAE1BC,EAF0B,KAmBxC,OAZAC,qBAAW,WAEPvB,EAASC,GACJuB,MAAM,SAAAC,GACHH,EAAS,CACLd,KAAMiB,EACNL,SAAS,SAIvB,CAAEnB,IAEGoB,EDfmBK,CAAczB,GAAhCO,EAF6B,EAE7BA,KAAMY,EAFuB,EAEvBA,QAEd,OACI,oCACI,4BAAMnB,GACJmB,GAAW,uBAAGzB,UAAU,oCAAb,WACb,yBAAKA,UAAU,UACX,yBAAKA,UAAU,aACX,yBAAKA,UAAU,gBAEPa,EAAKE,KAAK,SAAAC,GAAG,OACT,kBAAC,EAAD,eACIgB,IAAMhB,EAAIC,IACLD,YEkB1BiB,EAjCM,WAAO,IAAD,EAEa1C,mBAAS,CAAC,cAFvB,mBAEhBQ,EAFgB,KAEJT,EAFI,KAIvB,OACI,oCACI,yBAAKU,UAAU,aACX,yBAAKA,UAAU,OACX,yBAAKA,UAAU,UACX,4CACA,kBAAC,EAAD,CACIV,cAAkBA,IAEtB,6BAEA,4BAEQS,EAAWgB,KAAK,SAAAT,GAAQ,OACpB,kBAAC,EAAD,CACI0B,IAAM1B,EACNA,SAAWA,aCpBnD4B,IAASC,OACL,kBAAC,EAAD,MACFC,SAASC,eAAe,U","file":"static/js/main.11f760a1.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\n\nconst AddCategory = ( { setCategories } ) => {\n\n    const [inputValue, setInputValue] = useState('');\n    \n    const handleInputChange = (e) => {\n        setInputValue( e.target.value );\n    }\n\n    const handleSubmit = (e) => {\n        e.preventDefault();\n\n        if( inputValue.trim().length > 2 ){\n\n            setCategories( categories => [ inputValue, ...categories ] );\n            setInputValue('');\n        }\n\n\n    }\n\n    return (\n        <form \n            onSubmit = { handleSubmitÂ }\n        >\n            <input\n                className=\"form-control w-100\"\n                type=\"text\"\n                value={ inputValue }\n                onChange={ handleInputChange }\n            />\n        </form>\n    )\n}\n\nexport default AddCategory\n\nAddCategory.propTypes = {\n    setCategories: PropTypes.func.isRequired,\n}\n","\nexport const getGifs = async ( category ) => {\n\n    const url = `https://api.giphy.com/v1/gifs/search?q=${ encodeURI(category) }&api_key=lY8wCg4JOTPxixmg3NvWDpFK6KgzUB2f&limit=9`;\n    const resp = await fetch( url );\n    const { data } = await resp.json();\n\n    const gifs = data.map( img => {\n        return {\n            id: img.id,\n            title: img.title,\n            url: img.images.downsized_medium.url\n        }\n    })\n\n    return gifs;\n}\n","import React from 'react'\n\nexport const GifGridItem = ({ title, url }) => {\n\n    return (\n        <div className=\"card animate__animated animate__fadeInUpBig\">\n            <div className=\"card-body\">\n                <img className=\"img-fluid\" src={ url } alt={ title } />\n                <p>{ title }</p>\n            </div> \n        </div>\n    )\n}\n","import React from 'react'\nimport { useFetchGifs } from '../hooks/useFetchGifs'\nimport { GifGridItem } from './GifGridItem';\n\n\nexport const GifGrid = ({ category }) => {\n\n    const { data, loading } = useFetchGifs( category );\n\n    return (\n        <>\n            <h3>{ category }</h3>\n            { loading && <p className=\"animate__animated animate__flash\" >Loading</p> }\n            <div className=\"col-12\">\n                <div className=\"card-grid\">\n                    <div className=\"card-columns\">\n                        {\n                            data.map( img => (\n                                <GifGridItem \n                                    key={ img.id }\n                                    { ...img }\n                                />\n                            ))\n                        }\n                    </div>\n                </div>\n            </div>       \n        </>\n    )\n}\n","import { useState, useEffect } from \"react\"\nimport { getGifs } from '../helpers/getGifs'\n\nexport const useFetchGifs = ( category ) => {\n\n    const [state, setState] = useState({\n        data: [],\n        loading: true\n    })\n\n    useEffect( () => {\n\n        getGifs( category )\n            .then( imgs => {\n                setState({\n                    data: imgs,\n                    loading: false,\n                })\n            })           \n\n    },[ category ]);\n\n    return state;\n}\n","import React, { useState } from 'react';\nimport AddCategory from './components/AddCategory';\nimport { GifGrid } from './components/GifGrid';\n\n\nconst GifExpertApp = () => {\n\n    const [categories, setCategories] = useState(['One Punch'])\n\n    return ( \n        <>\n            <div className=\"container\">\n                <div className=\"row\">\n                    <div className=\"col-12\">\n                        <h2>GifExpertApp</h2>\n                        <AddCategory \n                            setCategories = { setCategories }\n                        />\n                        <hr />\n\n                        <ol>\n                            { \n                                categories.map( category => \n                                    <GifGrid \n                                        key={ category }\n                                        category={ category } \n                                    />\n                                )\n                            }\n                        </ol>\n                    </div>\n                </div>\n            </div>\n\n        </>\n     );\n}\n \nexport default GifExpertApp;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport GifExpertApp from './GifExpertApp';\n\nReactDOM.render(\n    <GifExpertApp />,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}